#!/usr/bin/env python

import os
import re
import shutil
from subprocess import Popen, PIPE, check_output

Import("env")
Import("env_modules")

env_patchwork_editor = env_modules.Clone()

env_patchwork_editor.Append(CPPPATH=["."])
env_patchwork_editor.Append(CPPPATH=["external/include"])

# icon stuff

# env_patchwork_editor.Append(CPPPATH=["#thirdparty/thorsvg/"])

# env_patchwork_editor["BUILDERS"]["MakeGDREIconsBuilder"] = Builder(
#     action=env_patchwork_editor.Run(gdre_icon_builder.make_gdre_icons_action),
#     suffix=".h",
#     src_suffix=".svg",
# )
# icon_sources = Glob("icons/*.svg")

# env_patchwork_editor.Alias(
#     "gdre_icons",
#     [env_patchwork_editor.MakeGDREIconsBuilder("editor/gdre_icons.gen.h", icon_sources)],
# )


# automerge stuff

MODULE_DIR = os.path.realpath(".")
AUTOMERGE_C_DIR_PREFIX = "automerge/rust/automerge-c"
AUTOMERGE_C_DIR = os.path.join(MODULE_DIR, AUTOMERGE_C_DIR_PREFIX)
AUTOMERGE_C_BUILD_DIR = os.path.join(AUTOMERGE_C_DIR, "build")
EXTERNAL_DIR = os.path.join(MODULE_DIR, "external")

EXTERNAL_LIB_DIR = os.path.join(EXTERNAL_DIR, "lib")
AUTOMERGE_LIBS = ["external/lib/libautomerge.a", "external/lib/libautomerge_core.a"]


def automerge_builder(target, source, env):
    # we want to run the following commands:
    # cmake -E make_directory automerge/rust/automerge-c/build
    # cmake -S automerge/rust/automerge-c -B automerge/rust/automerge-c/build -DUTF32_INDEXING=true
    # cmake --build automerge/rust/automerge-c/build
    # cmake --install automerge/rust/automerge-c/build --prefix "/usr/local"
    output = bytes()
    try:
        output += check_output(["cmake", "-E", "make_directory", EXTERNAL_DIR]) + b"\n"
        output += check_output(["cmake", "-E", "make_directory", AUTOMERGE_C_BUILD_DIR]) + b"\n"
        output += (
            check_output(["cmake", "-S", AUTOMERGE_C_DIR, "-B", AUTOMERGE_C_BUILD_DIR, "-DUTF32_INDEXING=true"]) + b"\n"
        )
        output += check_output(["cmake", "--build", AUTOMERGE_C_BUILD_DIR]) + b"\n"
        output += check_output(["cmake", "--install", AUTOMERGE_C_BUILD_DIR, "--prefix", EXTERNAL_DIR]) + b"\n"
    except Exception as e:
        # convert output to string
        output = output.decode("utf-8")
        print(f"Failed to build automerge-c: {e}")
        print(f"Output: {output}")
        exit(1)


env_patchwork_editor["BUILDERS"]["AutomergeBuilder"] = Builder(
    action=automerge_builder,
    suffix=".a",
    src_suffix=["*.h"],
)
automerge_sources = Glob(AUTOMERGE_C_DIR_PREFIX + "/include/automerge-c/utils/*.h")

env_patchwork_editor.Alias(
    "automergelib",
    [env_patchwork_editor.AutomergeBuilder(AUTOMERGE_LIBS, automerge_sources)],
)
env.Append(LIBPATH=[EXTERNAL_LIB_DIR])
for lib in AUTOMERGE_LIBS:
    env_patchwork_editor.Depends(lib, automerge_sources)
    # get the basename of the library minus the extension
    lib_name = os.path.basename(lib).split(".")[0]
    full_lib_path = os.path.join(MODULE_DIR, lib)
    env.Append(LIBS=[lib_name])

def doproc(cmd):
    # ensure that it doesn't print stderr to the terminal if print_err is False
    process = Popen(cmd, stdout=PIPE, stderr=PIPE)
    (output, err) = process.communicate()
    if not err:
        return output.decode("utf-8").strip()
    else:
        return None

semver_regex = r"^[vV]?(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$"


def write_version_header():
    git = shutil.which("git")
    version_info = "unknown"
    is_tag = False
    if git == None:
        print("GDRE WARNING: cannot find git on path, unknown version will be saved in gdre_version.gen.h")
    else:
        # git describe --abbrev=6
        version_info = doproc([git, "describe", "--tags", "--abbrev=6"])
        if version_info is None:
            print("GDRE WARNING: git failed to run, unknown version will be saved in gdre_version.gen.h")
            version_info = "unknown"
        else:
            # git describe --exact-match --tags HEAD
            res = doproc([git, "describe", "--exact-match", "--tags", "HEAD"])
            if not res:
                splits = version_info.split("-")
                build_info = splits[-1]
                build_num = splits[-2]
                # everything but the last two elements
                new_version_info = "-".join(splits[:-2])
                semver_regex_match = re.match(semver_regex, new_version_info)
                if semver_regex_match:
                    major = semver_regex_match.group("major")
                    minor = semver_regex_match.group("minor")
                    patch = semver_regex_match.group("patch")
                    prerelease_tag = semver_regex_match.group("prerelease")
                    build_metadata = semver_regex_match.group("buildmetadata")
                else:
                    print("WARNING: version string does not match semver format")
                    splits = new_version_info.split(".")
                    if len(splits) < 3:
                        print("WARNING: version string is too short")
                        major = "0"
                        minor = "0"
                        patch = "0"
                    else:
                        major = splits[0]
                        minor = splits[1]
                        patch = splits[2]
                    prerelease_tag = ""
                    build_metadata = ""
                dev_stuff = f"dev.{build_num}+{build_info}"
                if prerelease_tag:
                    prerelease_name = prerelease_tag.split(".")[0]
                    prerelease_num = prerelease_tag.split(".")[-1]
                    if prerelease_num.isdigit():
                        prerelease_num = str(int(prerelease_num) + 1)
                        print("prerelease_num", prerelease_num)
                        prerelease_tag = f"{prerelease_name}.{prerelease_num}"
                    else:
                        prerelease_tag += ".1"
                    new_version_info = f"{major}.{minor}.{patch}-{prerelease_tag}+{dev_stuff.replace('+', '-')}"
                else:
                    patch = str(int(patch) + 1) if patch.isdigit() else 0
                    new_version_info = f"{major}.{minor}.{patch}-{dev_stuff}"
                version_info = new_version_info
            else:
                version_info = res

    f = open("editor/patchwork_version.gen.h", "w")
    # check if we're not on a tag
    process = Popen([git, "status", "--porcelain"], stdout=PIPE)
    # define GDRE_VERSION "dev-poc (for Godot 4.0)"
    f.write('#define GDRE_VERSION "')
    f.write(version_info)
    f.write('"\n')
    f.close()


write_version_header()

module_obj = []

env_patchwork_editor.add_source_files(module_obj, "*.cpp")
env_patchwork_editor.add_source_files(module_obj, "editor/*.cpp")
env.modules_sources += module_obj
env.Depends(module_obj, AUTOMERGE_LIBS)
